package persistence;

import core.EasyOpponent;
import core.Player;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class PlayerDeserializerTest {
    private List<Player> players;
    private PlayerSerializer serializer;
    private PlayerDeserializer deserializer;
    private Player p1;
    private Player p2;
    private String playerFile = "testPlayerFile.json";

    /**
     * Setup method, running before each test method.
     */
    @Before
    public void setUp() {
        players = new ArrayList<>();
        p1 = new Player();
        p1.setName("Mr Test");
        p2 = new EasyOpponent();
        p2.setName("Mr Easy");
        players.add(p1);
        players.add(p2);

        serializer = new PlayerSerializer();
        deserializer = new PlayerDeserializer();
    }

    @Test
    public void serializePlayer() {
        String jsonString = "{\"wins\":5,\"draws\":1,\"losses\":0,\"name\":\"Player One\"}";
        Player p1 = deserializer.deserializePlayer(jsonString);
        Assert.assertEquals("Player One",p1.getName());
    }

    @Test
    public void serializePlayers() {
        String jsonString = "[{\"wins\":5,\"draws\":1,\"losses\":0,\"name\":\"Player One\"}"
                + ",{\"wins\":0,\"draws\":0,\"losses\":5,\"name\":\"Player Two\"}]";
        players = deserializer.deserializePlayers(jsonString);
        Assert.assertEquals(2,players.size());
        Assert.assertEquals(5, players.get(1).losses);
    }

    @Test
    public void testSavePlayers() {
        Assert.assertEquals(2, players.size());
        Assert.assertEquals(0, players.get(1).losses);
        p2.losses = 5;
        try {
            serializer.savePlayers(players, playerFile);
            players.clear();
            Assert.assertEquals(0, players.size());
            players = deserializer.loadPlayers(playerFile);
            Assert.assertEquals(2, players.size());
            Assert.assertEquals(5, players.get(1).losses);
        } catch (IOException e) {
            Assert.fail("IOException thrown!");
            e.printStackTrace();
        }
    }

    @Test
    public void testSetPath() {
        try {
            players.add(p1);
            serializer.savePlayers(players, "test.txt");
        } catch (IllegalArgumentException e) {
            // OK
        } catch (Exception e) {
            Assert.fail("Should throw IllegalArgumentException.");
        }

        try {
            players = deserializer.loadPlayers("æøå.json");
        } catch (IllegalArgumentException e) {
            // OK
        } catch (Exception e) {
            Assert.fail("Should throw IllegalArgumentException.");
        }
    }

    @Test
    public void readEmptyFile() {
        Assert.assertEquals(2, players.size());
        try {
            players = deserializer.loadPlayers("emptyFile.json");
        } catch (IOException e) {
            Assert.fail("IOException thrown!");
        }
        Assert.assertEquals(0, players.size());
    }

    /**
     * Deletes temporary files generated by the tests.
     */
    @After
    public void cleanUp() {
        File file = new File(playerFile);
        if (! file.delete() && file.exists()) {
            throw new IllegalStateException("Error in cleaning up temporary files.");
        }
    }
}
